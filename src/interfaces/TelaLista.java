/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.borders.GrooveBorder;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Arthur Dias
 */
public class TelaLista extends javax.swing.JFrame {

    private Connection conn;
    // Variáveis Banco de dados - PostGreSQL
    private static final String table = "acic_events";
    private static final String database = "acicDATA";
    private static final String URL = "jdbc:postgresql://localhost:5432/"+database;  // URL do banco (Não altere se deixar sistema local)
    private static final String USER = "postgres";  // Usuário do banco
    private static final String PASSWORD = "123";
    /**
     * Creates new form TelaPrincipal
     */
    public TelaLista() {
        initComponents();
        // Conexão com banco de dados
        // PostGreSQL Connection
        try {
            // Estabelece a conexão com o banco
            conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Conectado ao banco de dados com sucesso!");
            carregarServicos();
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Erro ao conectar ao banco de dados");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rSTableMetro1 = new rojeru_san.complementos.RSTableMetro();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        name_us_event = new javax.swing.JTextField();
        excluir = new javax.swing.JButton();
        atualizar = new javax.swing.JButton();
        CadastrarServico = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jvID = new javax.swing.JTextField();
        Saida = new javax.swing.JLabel();
        pdfGenerator = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TBservicos = new rojeru_san.complementos.RSTableMetro();

        rSTableMetro1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(rSTableMetro1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de serviços");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(153, 194, 77));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Lista de Participantes");

        jLabel2.setText("Nome");

        name_us_event.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        name_us_event.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                name_us_eventActionPerformed(evt);
            }
        });

        excluir.setText("EXCLUIR");
        excluir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });

        atualizar.setText("ATUALIZAR");
        atualizar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });

        CadastrarServico.setText("CADASTRAR");
        CadastrarServico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        CadastrarServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarServicoActionPerformed(evt);
            }
        });

        jLabel5.setText("ID");

        jvID.setEditable(false);
        jvID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jvID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jvIDActionPerformed(evt);
            }
        });

        Saida.setBackground(new java.awt.Color(255, 255, 255));
        Saida.setFont(new java.awt.Font("Arial Black", 0, 35)); // NOI18N
        Saida.setForeground(new java.awt.Color(255, 255, 255));
        Saida.setText("x");
        Saida.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Saida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaidaMouseClicked(evt);
            }
        });

        pdfGenerator.setText("Gerar PDF");
        pdfGenerator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pdfGenerator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfGeneratorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(CadastrarServico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pdfGenerator, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jvID, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel5)))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name_us_event, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Saida, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(name_us_event, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jvID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Saida))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CadastrarServico)
                    .addComponent(excluir)
                    .addComponent(atualizar)
                    .addComponent(pdfGenerator))
                .addGap(30, 30, 30))
        );

        TBservicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TBservicos.setColorBackgoundHead(new java.awt.Color(102, 102, 102));
        TBservicos.setColorBordeFilas(new java.awt.Color(0, 204, 255));
        TBservicos.setColorBordeHead(new java.awt.Color(255, 255, 255));
        TBservicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBservicosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TBservicos);
        if (TBservicos.getColumnModel().getColumnCount() > 0) {
            TBservicos.getColumnModel().getColumn(0).setMinWidth(30);
            TBservicos.getColumnModel().getColumn(0).setMaxWidth(9999);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void name_us_eventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_name_us_eventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_name_us_eventActionPerformed

    private void CadastrarServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarServicoActionPerformed
        cadastrarServico(name_us_event.getText());
        carregarServicos();
    }//GEN-LAST:event_CadastrarServicoActionPerformed

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        if(TBservicos.getSelectedRow() != -1)
        {
          int pos = TBservicos.getSelectedRow();
          try
          {
             String idValueSTR = TBservicos.getValueAt(pos,0).toString();
             int idValue = Integer.parseInt(idValueSTR);
             excluirCadastro(idValue);

          }
          catch(Exception e)
          {
              System.out.println("Erro Botão");
          }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Selecione um serviço para excluir!");
        }
    }//GEN-LAST:event_excluirActionPerformed

    private void jvIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jvIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jvIDActionPerformed

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
        if(TBservicos.getSelectedRow() != -1){
            int pos = TBservicos.getSelectedRow();
            try{
               String idValueSTR = TBservicos.getValueAt(pos,0).toString();
               int idValue = Integer.parseInt(idValueSTR);
               atualizarCadastro(idValue);
            } catch(Exception e) {
                System.out.println("Erro Botão");
                e.printStackTrace();
            }
       }
    }//GEN-LAST:event_atualizarActionPerformed

    private void TBservicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBservicosMouseClicked
       if(TBservicos.getSelectedRow() != -1){
        jvID.setText(TBservicos.getValueAt(TBservicos.getSelectedRow(), 0).toString());
        name_us_event.setText(TBservicos.getValueAt(TBservicos.getSelectedRow(), 1).toString());
         }
    }//GEN-LAST:event_TBservicosMouseClicked

    private void SaidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaidaMouseClicked
        setVisible(false);
        new tela_interativa().setVisible(true);  
    }//GEN-LAST:event_SaidaMouseClicked

    private void pdfGeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfGeneratorActionPerformed
        pdfInscric();
    }//GEN-LAST:event_pdfGeneratorActionPerformed

   public void pdfInscric()
    {
        String homeDirectory = System.getProperty("user.home");
        String documentsDirectory = homeDirectory + File.separator + "Documents";
        File gacicFolder = new File(documentsDirectory, "SCACIC");
        if (!gacicFolder.exists()) {
            System.out.println(gacicFolder);
            gacicFolder.mkdir();
            System.out.println(gacicFolder);
        }
        LocalDateTime c = LocalDateTime.now();
        DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd-MM-yyyy_HH_mm_ss");
        String dataHoraFormatada = c.format(formatador);
        String dest = gacicFolder+"/evento_"+dataHoraFormatada+".pdf";
        String destImg = "src/imagens/aciclog.png";
        String sql = "SELECT id, nome FROM " + table + " WHERE id_cad="+Integer.valueOf(view.iddd);

        // Cria um documento PDF
        try (
            // Conexão com o banco de dados
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql)
        )
        {
            float widPDF[] = {200f, 300f};
            // Cria o PdfWriter
            PdfWriter writer = new PdfWriter(new FileOutputStream(dest));
            // Cria o PdfDocument
            PdfDocument pdf = new PdfDocument(writer);
            // Cria um Document para adicionar elementos
            Document document = new Document(pdf);

            // Adiciona um parágrafo ao documento
            ImageData data = ImageDataFactory.create(destImg);
            Image imagem1 = new Image(data);
            document.add(imagem1.setHorizontalAlignment(HorizontalAlignment.CENTER));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Lista de evento").setBold().setFontSize(20).setTextAlignment(TextAlignment.CENTER));
      
            
            Table table = new Table(widPDF);
            
            Border bord1 = new GrooveBorder(3);
            
            Table threeTab = new Table(widPDF);
            threeTab.setBackgroundColor(new DeviceRgb(23,23,23), 0.6f);
            threeTab.addCell(new Cell().add(new Paragraph("Nome")).setFontColor(new DeviceRgb(255,255,255)).setBorder(Border.NO_BORDER).setTextAlignment(TextAlignment.CENTER));
            threeTab.addCell(new Cell().add(new Paragraph("Assinatura")).setFontColor(new DeviceRgb(255,255,255)).setBorder(Border.NO_BORDER).setTextAlignment(TextAlignment.CENTER));
            document.add(threeTab.setHorizontalAlignment(HorizontalAlignment.CENTER));
            
            while (rs.next())
            {
                table.addCell(new Cell().add(new Paragraph(rs.getString("nome"))));
                table.addCell(new Cell().add(new Paragraph("")));
            }
            document.add(table.setHorizontalAlignment(HorizontalAlignment.CENTER));
            document.add(new Paragraph("Este relatório é gerado automaticamente pelo SCACIC").setFontSize(10).setTextAlignment(TextAlignment.CENTER));
            // Fecha o documento
            document.close();
            System.out.println("PDF criado com sucesso em: " + dest);
            JOptionPane.showMessageDialog(null, "Relatório Salvo em "+dest);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();
        }
    }
    
    public static void main(String args[]) {
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaLista().setVisible(true);
            }
        });
    }

    
    public Connection getConnection() {
        return conn;
    }
    
    // ADD Database PostGreSQL
    public void cadastrarServico(String servico)
    {
        // Ajustar nome das colunas se necessário
        String sql = "INSERT INTO "+table+" (nome,id_cad) VALUES "
                + "(?,?)";
        
        // Incremento
        try(PreparedStatement pst = conn.prepareStatement(sql))
        {
           pst.setString(1, name_us_event.getText()); // Primeiro "?" é o nome de serviço
           pst.setInt(2, Integer.parseInt(view.iddd)); // Terceiro "?" é a Referência
            
            int rowsAffected = pst.executeUpdate();
            
            if(rowsAffected>0)
            {
                System.out.println("Serviço inserido com sucesso");
            } 
            else
            {
                System.out.println("Erro ai inserir serviço.");
            }
        } 
        catch (SQLException e)
        {
            System.out.println("Erro ao inserir serviço");
            e.printStackTrace();
        }
    }
    
    public void excluirCadastro(int id)
    {
        // Ajustar nome da coluna se necessário
        String sql = "DELETE FROM "+table+" WHERE id = ?";
        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            // Substitui o placeholder "?" pelo valor do id
            pst.setInt(1, id);
            // Verifica se alteração foi concluida
            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Serviço excluído com sucesso!");
            } else {
                System.out.println("Erro ao excluir serviço.");
            }
            
            // Atualizar planilha
            carregarServicos();
            
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Erro ao excluir serviço.");
        }
    }
    
    public void atualizarCadastro(int id)
    {
        // Ajustar nome das colunas se necessário
        String sql = "UPDATE "+table+" "
                + "SET nome = ?"
                + " WHERE id = ?";
        java.sql.Date date;
        
        // UPDATE
        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            // Substitui o placeholder "?" pelo valor do i
            pst.setInt(2, id);
            pst.setString(1, name_us_event.getText());  // Atualiza o nome do serviço
            
            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Serviço atualizar com sucesso!");
                carregarServicos();
            } else {
                System.out.println("Erro ai atualizar serviço.");
            }
        } catch (SQLException e) {
            System.out.println("Erro ao atualizar serviço.");
            e.printStackTrace();
        }
    }
    
    
    // Atualizar tabela
    public void carregarServicos() {
        // Ajustar nome das colunas se necessário
        String sql = "SELECT id, nome FROM " + table + " WHERE id_cad="+Integer.valueOf(view.iddd);
        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql))
        {
            DefaultTableModel tbprodutos = (DefaultTableModel) TBservicos.getModel();
            tbprodutos.setRowCount(0); // Limpa a tabela antes de adicionar os dados
                
            while (rs.next())
            {
                Object[] dados =
                {
                    rs.getInt("id"),
                    rs.getString("nome")
                };
                
                tbprodutos.addRow(dados);
            }
        }
        catch (SQLException e)
        {
            System.out.println("Erro ao carregar serviços");
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CadastrarServico;
    private javax.swing.JLabel Saida;
    private rojeru_san.complementos.RSTableMetro TBservicos;
    private javax.swing.JButton atualizar;
    private javax.swing.JButton excluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jvID;
    private javax.swing.JTextField name_us_event;
    private javax.swing.JButton pdfGenerator;
    private rojeru_san.complementos.RSTableMetro rSTableMetro1;
    // End of variables declaration//GEN-END:variables
}
